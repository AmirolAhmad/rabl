{"name":"Rabl","body":"# RABL #\r\n\r\nRABL (Ruby API Builder Language) is a Rails and [Padrino](http://padrinorb.com) ruby templating system for generating JSON, XML, MessagePack, PList and BSON. When using the ActiveRecord 'to_json' method, I tend to quickly find myself wanting a more expressive and powerful solution for generating APIs.\r\nThis is especially frustrating when the JSON representation is complex or doesn't match the exact schema defined in the database.\r\n\r\nI wanted a simple and flexible system for generating my APIs. In particular, I wanted to easily:\r\n\r\n * Create arbitrary nodes named based on combining data in an object\r\n * Pass arguments to methods and store the result as a child node\r\n * Render partial templates and inherit to reduce code duplication\r\n * Rename or alias attributes to change the name from the model\r\n * Append attributes from a child into a parent node\r\n * Include nodes only if a certain condition has been met\r\n\r\nAnyone who has tried the 'to_json' method used in ActiveRecord for generating a JSON response has felt the pain of this restrictive approach.\r\nRABL is a general templating system created to solve these problems in an entirely new way.\r\n\r\n## Installation ##\r\n\r\nInstall RABL as a gem:\r\n\r\n```\r\ngem install rabl\r\n```\r\n\r\nor add to your Gemfile:\r\n\r\n```ruby\r\n# Gemfile\r\ngem 'rabl'\r\n# Also add either `json` or `yajl-ruby` as the JSON parser\r\ngem 'yajl-ruby'\r\n```\r\n\r\nand run `bundle install` to install the dependency.\r\n\r\nIf you are using **Rails 2.X, Rails 3.X or Padrino**, RABL works without configuration.\r\n\r\n**Important:** With Padrino, be sure that **the rabl gem is listed after the padrino gem in your Gemfile**, otherwise\r\nRabl will not register as a template engine.\r\n\r\nWith Sinatra, or any other tilt-based framework, simply register:\r\n\r\n    Rabl.register!\r\n\r\nand RABL will be initialized and ready for use. For usage with Sinatra, check out\r\nthe [Sinatra Usage](https://github.com/nesquena/rabl/wiki/Setup-for-Sinatra) guide.\r\n\r\n**Note:** Users have reported a few rendering issues with Rails 3.2.\r\nThe [template handler](https://github.com/nesquena/rabl/blob/master/lib/rabl/template.rb) probably needs\r\na patch to properly support Rails 3.2. Hopefully I can get to it soon but patches are welcome.\r\n\r\n## Overview ##\r\n\r\nYou can use RABL to generate JSON and XML based APIs from any ruby object.\r\nWith RABL, the data typically is derived primarily from models (ORM-agnostic) and the representation of the API output is described within\r\na view template using a simple ruby DSL. This allows you to keep your data separated from the JSON or XML you wish to output.\r\n\r\nOnce you have installed RABL (explained above), you can construct a RABL view template and then render the template\r\nfrom your Sinatra, Padrino or Rails applications from the controller (or route) very easily. Using [Padrino](http://padrinorb.com) as an\r\nexample, assuming you have a `Post` model filled with blog posts, you can render an API representation (both JSON and XML) by creating a route:\r\n\r\n```ruby\r\n# app/app.rb\r\nget \"/posts\", :provides => [:json, :xml] do\r\n  @user = current_user\r\n  @posts = Post.order(\"id DESC\")\r\n  render \"posts/index\"\r\nend\r\n```\r\n\r\nThen we can create the following RABL template to express the API output of `@posts`:\r\n\r\n```ruby\r\n# app/views/posts/index.rabl\r\ncollection @posts\r\nattributes :id, :title, :subject\r\nchild(:user) { attributes :full_name }\r\nnode(:read) { |post| post.read_by?(@user) }\r\n```\r\n\r\nWhich would output the following JSON or XML when visiting `http://localhost:3000/posts.json`\r\n\r\n```js\r\n[{  \"post\" :\r\n  {\r\n    \"id\" : 5, title: \"...\", subject: \"...\",\r\n    \"user\" : { full_name : \"...\" },\r\n    \"read\" : true\r\n  }\r\n}]\r\n```\r\n\r\nThat's a basic overview but there is a lot more to see such as partials, inheritance, custom nodes, etc. Read the full details of RABL below.\r\n\r\n## Configuration ##\r\n\r\nRABL is intended to require little to no configuration to get working. This is the case in most scenarios, but depending on your needs you may want to set the following global configurations in your application (this block is completely optional):\r\n\r\n```ruby\r\n# config/initializers/rabl_init.rb\r\nRabl.configure do |config|\r\n  # Commented as these are defaults\r\n  # config.cache_all_output = false\r\n  # config.cache_sources = false\r\n  # config.json_engine = nil # Any multi\\_json engines\r\n  # config.msgpack_engine = nil # Defaults to ::MessagePack\r\n  # config.bson_engine = nil # Defaults to ::BSON\r\n  # config.plist_engine = nil # Defaults to ::Plist::Emit\r\n  # config.include_json_root = true\r\n  # config.include_msgpack_root = true\r\n  # config.include_bson_root = true\r\n  # config.include_plist_root = true\r\n  # config.include_xml_root  = false\r\n  # config.enable_json_callbacks = false\r\n  # config.xml_options = { :dasherize  => true, :skip_types => false }\r\nend\r\n```\r\n\r\nEach option specifies behavior related to RABL's output. If `include_json_root` is disabled that removes the\r\nroot node for each child in the output, and `enable_json_callbacks` enables support for 'jsonp' style callback\r\noutput if the incoming request has a 'callback' parameter.\r\n\r\nIf `cache_sources` is set to `true`, template lookups will be cached for improved performance.\r\nThe cache can be reset manually by running `Rabl.reset_source_cache!` within your application.\r\n\r\nIf `cache_all_output` is set to `true` then every template including each individual template used as part of a collection will be cached separately.\r\nAdditionally, anything within child, glue and partial will also be cached separately.\r\nTo cache just a single template, see the section titled 'Caching' below.\r\n\r\nNote that the `json_engine` option uses [multi_json](http://intridea.com/2010/6/14/multi-json-the-swappable-json-handler) engine\r\ndefaults so that in most cases you **don't need to configure this** directly. If you wish to use yajl as\r\nthe primary JSON encoding engine simply add that to your Gemfile:\r\n\r\n```ruby\r\n# Gemfile\r\ngem 'yajl-ruby', :require => \"yajl\"\r\n```\r\n\r\nand RABL will automatically start using that engine for encoding your JSON responses!\r\n\r\n### Message Pack ###\r\n\r\nRabl also includes optional support for [Message Pack](http://www.msgpack.org/) serialization format using the [msgpack gem](https://rubygems.org/gems/msgpack).\r\nTo enable, include the msgpack gem in your project's Gemfile. Then use Rabl as normal with the `msgpack` format (akin to json and xml formats).\r\n\r\n```ruby\r\n# Gemfile\r\ngem 'msgpack', '~> 0.4.5'\r\n```\r\n\r\nOne can additionally use a custom Message Pack implementation by setting the Rabl `msgpack_engine` configuration attribute. This custom message pack engine must conform to the MessagePack#pack method signature.\r\n\r\n```ruby\r\nclass CustomEncodeEngine\r\n  def self.pack string\r\n    # Custom Encoding by your own engine.\r\n  end\r\nend\r\n\r\nRabl.configure do |config|\r\n  config.msgpack_engine = CustomEncodeEngine\r\nend\r\n```\r\n\r\n*NOTE*: Attempting to render the msgpack format without either including the msgpack gem\r\nor setting a `msgpack_engine` will cause an exception to be raised.\r\n\r\n### BSON ###\r\n\r\nRabl also includes optional support for [BSON](http://bsonspec.org/) serialization format using the [bson gem](https://rubygems.org/gems/bson).\r\nTo enable, include the bson gem in your project's Gemfile. Then use Rabl as normal with the `bson` format (akin to json and xml formats).\r\n\r\n```ruby\r\n# Gemfile\r\ngem 'bson', '~> 1.5.2'\r\n```\r\n\r\nTo use it with Rails, also register the bson mime type format:\r\n\r\n```ruby\r\n# config/initializers/mime_types.rb\r\nMime::Type.register \"application/bson\", :bson\r\n```\r\n\r\nOne can additionally use a custom BSON implementation by setting the Rabl `bson_engine` configuration attribute.\r\nThis custom BSON engine must conform to the BSON#serialize method signature.\r\n\r\n```ruby\r\nclass CustomEncodeEngine\r\n  def self.serialize string\r\n    # Custom Encoding by your own engine.\r\n  end\r\nend\r\n\r\nRabl.configure do |config|\r\n  config.bson_engine = CustomEncodeEngine\r\nend\r\n```\r\n\r\n*NOTE*: Attempting to render the bson format without either including the bson gem or\r\nsetting a `bson_engine` will cause an exception to be raised.\r\n\r\n### Plist ###\r\n\r\nRabl also includes optional support for [Plist](http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/PropertyLists/Introduction/Introduction.html]) serialization format using the [plist gem](http://plist.rubyforge.org/).\r\nTo enable, include the plist gem in your project's Gemfile. Then use Rabl as normal with the `plist` format (akin to other formats).\r\n\r\n```ruby\r\n# Gemfile\r\ngem 'plist'\r\n```\r\n\r\nThere is also an option for a custom Plist implementation by setting the Rabl `plist_engine` configuration attribute.\r\n\r\n```ruby\r\nclass CustomEncodeEngine\r\n  def self.dump string\r\n    # Custom Encoding by your own engine.\r\n  end\r\nend\r\n\r\nRabl.configure do |config|\r\n  config.plist_engine = CustomEncodeEngine\r\nend\r\n```\r\n\r\n*NOTE*: Attempting to render the plist format without either including the plist gem or setting a `plist_engine` will cause an exception to be raised.\r\n\r\n## Usage ##\r\n\r\n### Object Assignment ###\r\n\r\nTo declare the data object for use in the template:\r\n\r\n```ruby\r\n# app/views/users/show.json.rabl\r\nobject @user\r\n```\r\n\r\nor specify an alias for the object:\r\n\r\n```ruby\r\nobject @user => :person\r\n# => { \"person\" : { ... } }\r\n```\r\n\r\nor pass a collection of objects:\r\n\r\n```ruby\r\ncollection @users\r\n# => [ { \"user\" : { ... } } ]\r\n```\r\n\r\nor specify a root node label for the collection:\r\n\r\n```ruby\r\ncollection @users => :people\r\n# => { \"people\" : [ { \"person\" : { ... } } ] }\r\n```\r\n\r\nor even specify both the child and root labels for a collection:\r\n\r\n```ruby\r\ncollection @users, :root => \"people\", :object_root => \"user\"\r\n# => { \"people\" : [ { \"user\" : { ... } } ] }\r\n```\r\n\r\nand this will be used as the default data for the rendering, or disable the object root explicitly:\r\n\r\n```ruby\r\ncollection @users, :root => \"people\", :object_root => false\r\n# => { \"people\" : [ { ... }, { ... } ] }\r\n```\r\n\r\nThere can also be odd cases where the root-level of the response doesn't map directly to any object:\r\n\r\n```ruby\r\nobject false\r\nnode(:some_count) { |m| @user.posts.count }\r\nchild(@user) { attribute :name }\r\n```\r\n\r\nIn those cases, object can be assigned to 'false' and nodes can be constructed free-form.\r\n\r\n### Attributes ###\r\n\r\nBasic usage of the templater to define a few simple attributes for the response:\r\n\r\n```ruby\r\n# app/views/users/show.json.rabl\r\nattributes :id, :foo, :bar\r\n```\r\n\r\nor use with aliased attributes:\r\n\r\n```ruby\r\n# Take the value of model attribute `foo` and name the node `bar`\r\nattribute :foo => :bar\r\n# => { bar : 5 }\r\n```\r\n\r\nor even multiple aliased attributes:\r\n\r\n```ruby\r\nattributes :bar => :baz, :dog => :animal\r\n# => # { baz : <bar value>, animal : <dog value> }\r\n```\r\n\r\n### Child Nodes ###\r\n\r\nOften a response requires including nested information from data associated with the parent model:\r\n\r\n```ruby\r\nchild :address do\r\n  attributes :street, :city, :zip, :state\r\nend\r\n```\r\n\r\nYou can also add child nodes from an arbitrary data source:\r\n\r\n```ruby\r\nchild @posts => :foobar do\r\n  attributes :id, :title\r\nend\r\n```\r\n\r\nor use model associations with an alias:\r\n\r\n```ruby\r\n# Renders all the 'posts' association\r\n# from the model into a node called 'foobar'\r\nchild :posts => :foobar do\r\n  attributes :id, :title\r\nend\r\n```\r\n\r\n### Gluing Attributes ###\r\n\r\nYou can also append child attributes back to the root node:\r\n\r\n```ruby\r\n# Appends post_id and post_name to parent json object\r\nglue @post do\r\n  attributes :id => :post_id, :name => :post_name\r\nend\r\n```\r\n\r\nUse glue to add additional attributes to the parent object.\r\n\r\n### Custom Nodes ###\r\n\r\nThis will generate a json response based on the result of the `node` block:\r\n\r\n```ruby\r\n# app/views/users/show.json.rabl\r\nnode :full_name do |u|\r\n  u.first_name + \" \" + u.last_name\r\nend\r\n```\r\n\r\nor a custom node that exists only if a condition is true:\r\n\r\n```ruby\r\n# m is the object being rendered, also supports :unless\r\nnode(:foo, :if => lambda { |m| m.has_foo? }) do |m|\r\n  m.foo\r\nend\r\n```\r\n\r\nor don't pass a name and have the node block merged into the response:\r\n\r\n```ruby\r\nnode do |u|\r\n  { :full_name => u.first_name + \" \" + u.last_name }\r\n  # => { full_name : \"Bob Johnson\" }\r\nend\r\n```\r\n\r\nYou can use custom nodes like these to create flexible representations of a value utilizing all the data from the model.\r\n\r\n### Partials ###\r\n\r\nOften you need to access other data objects in order to construct custom nodes in more complex associations. You can get access to the rabl representation of another data object by rendering a RABL partial:\r\n\r\n```ruby\r\nnode :location do\r\n  { :city => @city, :address => partial(\"users/address\", :object => @address) }\r\nend\r\n```\r\n\r\nor event access an object associated with the parent model:\r\n\r\n```ruby\r\nnode :location do |m|\r\n  { :city => m.city, :address => partial(\"users/address\", :object => m.address) }\r\nend\r\n```\r\n\r\nYou can use this method to construct arbitrarily complex nodes for your APIs. Note that you need to have RABL templates defined\r\nfor each of the objects you wish to construct representations for in this manner.\r\n\r\n### Inheritance ###\r\n\r\nAnother common issue of many template builders is unnecessary code redundancy. Typically many representations of an object across multiple endpoints share common attributes or nodes. The nodes for a 'post' object are probably the same or similar in most references throughout the various endpoints.\r\n\r\nRABL has the ability to extend other \"base\" rabl templates and additional attributes:\r\n\r\n```ruby\r\n# app/views/users/advanced.json.rabl\r\nextends \"users/base\" # another RABL template in \"app/views/users/base.json.rabl\"\r\n\r\nnode :can_drink do |m|\r\n  m.age > 21\r\nend\r\n```\r\n\r\nYou can also extend other rabl templates while constructing child nodes to reduce duplication:\r\n\r\n```ruby\r\n# app/views/users/show.json.rabl\r\nchild @address do\r\n  extends \"address/item\"\r\nend\r\n```\r\n\r\nUsing partials and inheritance can significantly reduce code duplication in your templates.\r\n\r\n### Template Scope ###\r\n\r\nIn RABL, you have access to everything you need to build an API response. Each RABL template has full access to the controllers\r\ninstance variables as well as all view helpers and routing urls.\r\n\r\n```ruby\r\n# app/some/template.rabl\r\nobject @post\r\n# Access instance variables\r\nchild(@user => :user) { ... }\r\n# or Rails helpers\r\nnode(:formatted_body) { |post| simple_format(post.body) }\r\n```\r\n\r\nThere should be no problem fetching the appropriate data to construct a response.\r\n\r\n### Deep Nesting ###\r\n\r\nIn APIs, you can often need to construct 2nd or 3rd level nodes. Let's suppose we have a 'quiz' model that has many 'questions'\r\nand then each question has many 'answers'. We can display this hierarchy in RABL quite easily:\r\n\r\n```ruby\r\n# app/views/quizzes/show.json.rabl\r\nobject @quiz\r\nattribute :title\r\nchild :questions do\r\n  attribute :caption\r\n  child :answers do\r\n    # Use inheritance to reduce duplication\r\n    extends \"answers/item\"\r\n  end\r\nend\r\n```\r\n\r\nThis will display the quiz object with nested questions and answers as you would expect with a quiz node, and embedded questions and answers.\r\nNote that RABL can be nested arbitrarily deep within child nodes to allow for these representations to be defined.\r\n\r\n### Caching ###\r\n\r\nCaching works by saving the entire template output to the configured cache_store in your application. Note that caching is currently **only available** for\r\nRails but support for other frameworks is planned in a future release.\r\n\r\nFor Rails, requires `action_controller.perform_caching` to be set to true in your environment, and for `cache` to be set to a key (object that responds to cache_key method, array or string).\r\n\r\n```ruby\r\n# app/views/users/show.json.rabl\r\nobject @quiz\r\ncache @quiz # key = rabl/quiz/[cache_key]\r\nattribute :title\r\n```\r\n\r\nThe `cache` keyword accepts the same parameters as fragment caching for Rails.\r\n\r\n```ruby\r\ncache @user            # calls @user.cache_key\r\ncache ['keel', @user]  # calls @user.cache_key and prefixes with kewl/\r\ncache 'lists'          # explicit key of 'lists'\r\ncache 'lists', expires_in: 1.hour\r\n```\r\n\r\nThe cache keyword is used from within the base template. It will ignore any cache keys specified in an extended template or within partials.\r\n\r\n```ruby\r\n# app/views/users/index.json.rabl\r\ncollection @users\r\ncache @users  # key = rabl/users/[cache_key]/users/[cache_key]/...\r\n\r\nextends \"users/show\"\r\n```\r\n\r\nand within the inherited template:\r\n\r\n```ruby\r\n# app/views/users/show.json.rabl\r\nobject @user\r\ncache @user # will be ignored\r\n\r\nattributes :name, :email\r\n```\r\nCaching can significantly speed up the rendering of RABL templates in production and is strongly recommended when possible.\r\n\r\n### Content Type Assignment ###\r\n\r\nCurrently in RABL, the content-type of your response is not set automatically. This is because RABL is intended\r\nto work for any Rack-based framework and as agostic to format as possible.\r\nCheck [this issue](https://github.com/nesquena/rabl/issues/185#issuecomment-4501232) for more\r\ndetails, and if you have any ideas or patches please let me know.\r\n\r\nIn the meantime, be sure to set the proper content-types if needed. This is usually pretty simple in both\r\nRails and Padrino. I recommend a before_filter on that controller or directly specified in an action.\r\n\r\n## Resources ##\r\n\r\nThere are many resources available relating to RABL including the [RABL Wiki](https://github.com/nesquena/rabl/wiki),\r\nand many tutorials and guides detailed below.\r\n\r\n### Advanced Usage ###\r\n\r\nLinks to resources for advanced usage:\r\n\r\n * Rendering JSON for a tree structure using RABL: https://github.com/nesquena/rabl/issues/70\r\n * Layouts (erb, haml and rabl) in RABL: https://github.com/nesquena/rabl/wiki/Using-Layouts\r\n * Backbone or [Ember.js](http://www.emberjs.com) Integration: https://github.com/nesquena/rabl/wiki/Backbone-Integration\r\n\r\nPlease add your own usages and let me know so we can add them here! Also be sure to check out\r\nthe [RABL Wiki](https://github.com/nesquena/rabl/wiki) for other usages.\r\n\r\n### Tutorials ###\r\n\r\nTutorials can always be helpful when first getting started:\r\n\r\n * [Railscasts #322](http://railscasts.com/episodes/322-rabl)\r\n * http://blog.joshsoftware.com/2011/12/23/designing-rails-api-using-rabl-and-devise/\r\n * http://engineering.gomiso.com/2011/06/27/building-a-platform-api-on-rails/\r\n * http://blog.lawrencenorton.com/better-json-requests-with-rabl\r\n * http://www.rodrigoalvesvieira.com/developing-json-api-rails-rabl/\r\n * http://tech.favoritemedium.com/2011/06/using-rabl-in-rails-json-web-api.html\r\n * http://seesparkbox.com/foundry/better_rails_apis_with_rabl\r\n * http://blog.dcxn.com/2011/06/22/rails-json-templates-through-rabl\r\n * http://teohm.github.com/blog/2011/05/31/using-rabl-in-rails-json-web-api\r\n\r\nLet me know if there's any other useful resources not listed here.\r\n\r\n### Related Libraries ###\r\n\r\nThere are several libraries that either complement or extend the functionality of RABL:\r\n\r\n * [grape-rabl](https://github.com/LTe/grape-rabl) - Allows rabl templates to be used with [grape](https://github.com/intridea/grape)\r\n * [gon](https://github.com/gazay/gon) - Exposes your Rails variables in JS with RABL support integrated.\r\n\r\nLet me know if there's any other related libraries not listed here.\r\n\r\n### Troubleshooting ###\r\n\r\n * Redundant calls for a collection: https://github.com/nesquena/rabl/issues/142#issuecomment-2969107\r\n * Testing RABL Views: https://github.com/nesquena/rabl/issues/130#issuecomment-4179285\r\n\r\n### Examples ###\r\n\r\nSee the [examples](https://github.com/nesquena/rabl/tree/master/examples) directory.\r\n\r\n## Issues ##\r\n\r\nCheck out the [Issues](https://github.com/nesquena/rabl/issues) tab for a full list:\r\n\r\n * Rigorous benchmarking and performance optimizations\r\n\r\n## Continuous Integration ##\r\n\r\n[![Continuous Integration status](https://secure.travis-ci.org/nesquena/rabl.png)](http://travis-ci.org/nesquena/rabl)\r\n\r\nCI is hosted by [travis-ci.org](http://travis-ci.org).\r\n\r\n## Authors and Contributors ##\r\n\r\nThanks to [Miso](http://gomiso.com) for allowing me to create this for our applications and release this project!\r\n\r\n* [Nathan Esquenazi](https://github.com/nesquena) - Creator of the project\r\n* [Arthur Chiu](https://github.com/achiu) - Core Maintainer, Riot Testing Guru\r\n* [Tim Lee](https://github.com/timothy1ee) - RABL is an awesome name and was chosen by the Miso CTO.\r\n* [David Sommers](https://github.com/databyte) - Enhanced template resolution and added caching support\r\n* [Rick Thomas](https://github.com/rickthomasjr) - Added options for extends and Sinatra testing\r\n* [Benjamin Yu](https://github.com/byu) - Added msgpack format support\r\n* [Chris Kimpton](https://github.com/kimptoc) - Helping with documentation and wiki\r\n* [Marjun](https://github.com/mpagalan) - Added xml option configurations\r\n* [Anton Orel](https://github.com/skyeagle) - Added Rails 3.1 compatibility\r\n* [Sasha Koss](https://github.com/kossnocorp) - Added multi_json support\r\n* [Matthew Schulkind](https://github.com/mschulkind) - Cleanup of configuration and tests\r\n* [Luke van der Hoeven](https://github.com/plukevdh) - Support non-ORM objects in templates\r\n* [Andrey Voronkov](https://github.com/Antiarchitect) - Added BSON format support\r\n* [Alli Witheford](https://github.com/alzeih) - Added Plist format support\r\n* [Ryan Bigg](https://github.com/radar) - Improved template resolution code\r\n\r\nand many more contributors listed in the [CHANGELOG](https://github.com/nesquena/rabl/blob/master/CHANGELOG.md).\r\n\r\nWant to contribute support for another format?\r\nCheck out the patches for [msgpack support](https://github.com/nesquena/rabl/pull/69), [plist support](https://github.com/nesquena/rabl/pull/153) and\r\n[BSON support](https://github.com/nesquena/rabl/pull/163) for reference.\r\n\r\nPlease fork and contribute, any help in making this project better is appreciated!\r\n\r\n## Inspirations ##\r\n\r\nThere are a few excellent libraries that helped inspire RABL and they are listed below:\r\n\r\n * [Tequila](https://github.com/inem/tequila)\r\n * [JSON Builder](https://github.com/dewski/json_builder)\r\n * [Argonaut](https://github.com/jbr/argonaut)\r\n\r\nThanks again for all of these great projects.\r\n\r\n## Copyright ##\r\n\r\nCopyright © 2011-2012 Nathan Esquenazi. See [MIT-LICENSE](https://github.com/nesquena/rabl/blob/master/MIT-LICENSE) for details.","tagline":"General ruby templating with json, bson, xml, plist and msgpack support","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}